1. Скачать репозиторий
    download git [link]
2. Добавдение файлов гит
- add
- commit
- push
3. Назначить гиту отслеживать папку console_test
- git init
4. Статус файлов в гите
- git status
5. Начать отслеживать фаил
- git add filename.py
6. Команда гиду для просмотра логов
- git log
_____________________________________________________________________
Выполнение домашнего задания по теме GIT
_____________________________________________________________________
Репозиторий Git — это хранилище, в котором расположен ваш проект и его история.
Это может быть локальное хранилище где-то на вашем компьютере или удаленное хранилище
на сервисе типа GitHub или другом хостинге в Интернете.

Коммит — это небольшой кусочек истории репозитория, основанный на предыдущем коммите.
Все они связаны между собой в цепочку, формируя историю изменений вашего проекта.

Ветка — это параллельная версия репозитория. Ветки позволяют вам работать над отдельными
функциями вашего проекта, не влияя на основную версию.
Закончив работу над новой фичей, вы можете объединить эту ветку с основной версией проекта.

История.
git log показывает историю
--pretty="..." — определяет формат вывода.
%h — укороченный хеш коммита.
%ad — дата коммита.
| — просто визуальный разделитель.
%s — комментарий.
%d — дополнения коммита («головы» веток или теги).
%an — имя автора.
--date=short — сохраняет формат даты коротким и симпатичным.
switch - команда для переключения между ветками.
revert - команда которя позволяет отмеенить любые коммиты в репозиторий.
reset - если выполнить команду reset с указанием ссылки на коммит то:
1.Изменит текущую ветку, чтобы она указывала на указанный коммит.
2.Опционально сбросит область подготовки до соответствия с указанным коммитом.
3.Опционально сбросит рабочую директорию до соответствия с указанным коммитом.

Удаление тегов позволит внутреннему механизму Git убрать остаточные коммиты,
на которые теперь не ссылаются никакие ветки или теги.
--all гарантирует, что мы видим все ветки, так как по умолчанию в логе показывается только текущая ветка.
Отмена слияния выполняется командой:
git merge --abort

Когда использовать команду rebase, а когда команду merge?

Используйте команду rebase:

Когда вы получаете изменения из удаленного репозитория и хотите применить их к своей локальной ветке.
Если вы хотите, чтобы история коммитов была линейной и легко читаемой.

Не используйте команду rebase:

Если текущая ветка является публичной и общей. Переписывание таких веток будет мешать работе других членов команды.
Если важна точная история ветки коммитов (поскольку команда rebase переписывает историю коммитов).
Учитывая приведенные выше рекомендации, я предпочитаю использовать команду rebase для краткосрочных, локальных веток
и команду merge для веток в публичном репозитории.

